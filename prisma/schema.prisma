generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tmdbId Int    @unique
  imdbId String @unique

  title             String   @db.VarChar(256)
  originalTitle     String?  @db.VarChar(256)
  language          String?
  releaseYear       Int?
  releaseDate       String?
  genres            String[]
  plot              String   @db.VarChar(4096)
  runtime           Int
  adult             Boolean  @default(false)
  budget            String? // overflows int (esp foreign currencies)
  revenue           String? // overflows int (Avatar 2009)
  homepage          String?  @db.VarChar(511)
  status            String
  mpaaRating        String?
  keywords          String[] @default([])
  countriesOfOrigin String[] @default([])
  languages         String[] @default([])
  cast              String[] @default([])
  director          String?
  production        String?
  awardsSummary     String?

  // images
  posterUrl              String? @db.VarChar(512)
  posterPlaceholderUrl   String? @db.VarChar(4096)
  posterWidth            Int?
  posterHeight           Int?
  backdropUrl            String? @db.VarChar(512)
  backdropPlaceholderUrl String? @db.VarChar(4096)
  backdropWidth          Int?
  backdropHeight         Int?

  // video
  trailerUrl       String? @db.VarChar(512)
  trailerYouTubeId String?

  // imdb
  imdbRating Float?
  imdbVotes  Int?
  imdbType   String?

  // tmdb
  tmdbPopularity Float?
  tmdbRating     Float?
  tmdbVotes      Int?

  // metacritic
  metacriticRating Float?
  metacriticVotes  Int?

  // rotten tomatoes
  rtCriticRating     Int?
  rtCriticVotes      Int?
  rtAudienceRating   Int?
  rtAudienceVotes    Int?
  rtCriticsConsensus String? @db.VarChar(1024)
  rtId               String?
  emsId              String?
  rtUrl              String?

  // letterboxd
  letterboxdScore Int?
  letterboxdVotes Int?

  // flickmetrix
  flickMetrixScore Int?
  flickMetrixId    Int?

  // custom / application-specific)
  foreign              Boolean? @default(false)
  relevancyScore       Float?
  imdbCustomPopularity Float?
  searchL              String?  @db.VarChar(2048)

  userMovies UserMovie[]

  @@index([imdbRating, releaseYear, foreign, genres, searchL, relevancyScore])
  @@index([imdbVotes])
  @@index([tmdbPopularity])
  @@index([rtCriticRating])
  @@index([rtAudienceRating])
  @@index([releaseDate])
  @@index([tmdbId])
  @@index([imdbId])
}

model UserMovie {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status  String?
  rating  Int?
  notes   String? @db.Text
  ignored Boolean @default(false)

  movieId Int
  userId  String

  movie Movie @relation(fields: [movieId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([movieId, userId])
  @@index([userId, movieId])
  @@index([userId, status, createdAt])
  @@index([userId, rating])
  @@index([userId, ignored])
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken") @db.Text
  access_token      String? @map("accessToken") @db.Text
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken") @db.Text
  session_state     String? @map("sessionState")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  // TODO: rename userMovies
  movies UserMovie[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
